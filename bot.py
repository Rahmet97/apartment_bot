import asyncio
import logging
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import sqlite3
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ApartmentBot:
    def __init__(self, token: str):
        self.token = token
        self.db_path = "data/apartments.db"
        self.application = Application.builder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("recent", self.recent_command))
        self.application.add_handler(CommandHandler("cheap", self.cheap_command))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ –¥–µ—à–µ–≤–ª–µ 30,000 ‚ÇΩ.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º
/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
/cheap - –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç Avito –∏ Cian –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.
        """.strip()

        await update.message.reply_text(welcome_message, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = """
ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
/recent - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
/cheap - –ü–æ–∫–∞–∑–∞—Ç—å 5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä

*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*
‚Ä¢ –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç Avito –∏ Cian
‚Ä¢ –ò—â–µ—Ç 3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–µ—à–µ–≤–ª–µ 30,000 ‚ÇΩ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞—Ö–æ–¥–∫–∞—Ö
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*
‚Ä¢ Avito.ru
‚Ä¢ Cian.ru

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """.strip()

        await update.message.reply_text(help_message, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        try:
            conn = sqlite3.connect(self.db_path, timeout=30.0)
            cursor = conn.cursor()

            cursor.execute("SELECT COUNT(*) FROM apartments")
            total_count = cursor.fetchone()[0]

            cursor.execute("SELECT source, COUNT(*) FROM apartments GROUP BY source")
            source_stats = cursor.fetchall()

            cursor.execute("SELECT AVG(price) FROM apartments")
            avg_price = cursor.fetchone()[0] or 0

            cursor.execute("SELECT MIN(price) FROM apartments")
            min_price = cursor.fetchone()[0] or 0

            cursor.execute("""
                           SELECT COUNT(*)
                           FROM apartments
                           WHERE created_at >= datetime('now', '-1 day')
                           """)
            last_24h = cursor.fetchone()[0]

            conn.close()

            stats_message = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä*

üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_count} –∫–≤–∞—Ä—Ç–∏—Ä
‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {last_24h} –∫–≤–∞—Ä—Ç–∏—Ä
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} ‚ÇΩ
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price:,.0f} ‚ÇΩ

üìã *–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:*
            """.strip()

            for source, count in source_stats:
                stats_message += f"\n‚Ä¢ {source}: {count} –∫–≤–∞—Ä—Ç–∏—Ä"

            await update.message.reply_text(stats_message, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def recent_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /recent"""
        try:
            conn = sqlite3.connect(self.db_path, timeout=30.0)
            cursor = conn.cursor()

            cursor.execute("""
                           SELECT title, price, location, source, url, created_at
                           FROM apartments
                           ORDER BY id DESC LIMIT 5
                           """)

            apartments = cursor.fetchall()
            conn.close()

            if not apartments:
                await update.message.reply_text("üîç –ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã")
                return

            message = "üïê *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:*\n\n"

            for i, (title, price, location, source, url, created_at) in enumerate(apartments, 1):
                message += f"""
{i}. *{title[:50]}{'...' if len(title) > 50 else ''}*
üí∞ {price:,} ‚ÇΩ | üìç {location}
üåê {source} | ‚è∞ {created_at}
üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({url})

                """.strip() + "\n\n"

            await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def cheap_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cheap"""
        try:
            conn = sqlite3.connect(self.db_path, timeout=30.0)
            cursor = conn.cursor()

            cursor.execute("""
                           SELECT title, price, location, source, url, created_at
                           FROM apartments
                           ORDER BY price ASC LIMIT 5
                           """)

            apartments = cursor.fetchall()
            conn.close()

            if not apartments:
                await update.message.reply_text("üîç –ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã")
                return

            message = "üí∞ *–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:*\n\n"

            for i, (title, price, location, source, url, created_at) in enumerate(apartments, 1):
                message += f"""
{i}. *{title[:50]}{'...' if len(title) > 50 else ''}*
üí∞ {price:,} ‚ÇΩ | üìç {location}
üåê {source} | ‚è∞ {created_at}
üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({url})

                """.strip() + "\n\n"

            await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    bot = ApartmentBot(bot_token)
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main())
